总而言之,  如果你想1个类的对象支持比较(排序), 就必须实现Comparable接口
http://blog.csdn.net/nvd11/article/details/27393445

线程的优先级用1-10之间的整数表示，数值越大优先级越高，默认的优先级为5。通过thread.setProperty()实现
修改maven  setting文件的mirrors可修改镜像路径

中文: chcp 65001
English: chcp 936 
Cmd设置字符编码为utf-8
办法
win+R --> regedit --> 计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor --> 添加一个字符串值 
(名称为：autorun 数据为：chcp 65001)

EJB:Enterprise Java Beans
    会话Bean(session Bean)
	实体Bean(Entity Bean)
	消息驱动Bean(MessageDriven Bean)
     
JPA:Java persistence API 持久层API
ORM:Object Relational Mapping 对象关系映射	 

安装virtualbox失败
HKEY_LOCAL_MACHINE/SYSTEM/ControlSet001/Control/Network 
将 ab(默认) REG_SZ 的值修改为20(里面是十进制的数值) 

如果在发布时使用mvn deploy -P release 的命令，由于版本号后不带-SNAPSHOT故当成是正式发布版本
如果发布时使用mvn deploy命令，那么就会使用默认的版本号0.1-SNAPSHOT，此时maven会认为是快照版本，会自动发布到快照版本库。
在distributionManagement段中配置的是snapshot快照库和release发布库的地址

maven获取真正起作用的repository集合流程：首先会获取pom.xml里的repository集合，然后在settings.xml里找mirrors元素，
如果repository的id和mirror的mirrorOf的值相同，则该mirror替代该repository，如果该repository找不到对应的mirror，则使用其本身，
依此可以得到最终起作用的repository集合

centos默认以root登录：
vi /etc/gdm/custom.conf
[daemon]
AutomaticLoginEnable=True
AutomaticLogin=root  #你想自动登录的用户名

linux添加删除用户
useradd name:添加用户 name为你想要的用户名，存储在/home 的目录里面
userdel -rf name:删除名称为name的用户。

System.exit(0)是将整个虚拟机里的内容都停掉了 ，而dispose()只是关闭这个窗口，但是并没有停止整个application exit() 。无论如何，内存都释放了！
也就是说连JVM都关闭了，内存里根本不可能还有什么东西
System.exit(0)是正常退出程序，而System.exit(1)或者说非0表示非正常退出程序
System.exit(status)不管status为何值都会退出程序。和return 相比有以下不同点：return是回到上一层，而System.exit(status)是回到最上层

JDK（开发环境）
JRE（运行环境）
JRE和java类库以及运行java程序所需要的其他组件一起构成JVM的一个实现。

idea liense server:
http://intellij.mandroid.cn/
http://idea.imsxm.com/
http://idea.iteblog.com/key.php
http://idea.codebeta.cn

代理：
静态代理，动态代理
java动态代理库cglib 底层基于java字节码操作框架ASM实现
核心类：net.sf.cglib.proxy.Enhancer  主要增强类,通过字节码技术动态创建委托类的子类实例。
        net.sf.cglib.proxy.MethodInterceptor:常用的方法拦截器接口，需要实现intercept方法,实现具体拦截处理;

运算符		
~:非     &:与	|：或  ^:异或	
~:非     &:与	|：或  ^:异或

转义字符      意义                            ASCII码值（十进制）
\a           响铃(BEL)                             007
\b       退格(BS) ，将当前位置移到前一列           008
\f       换页(FF)，将当前位置移到下页开头          012
\n       换行(LF) ，将当前位置移到下一行开头       010
\r       回车(CR) ，将当前位置移到本行开头         013
\t       水平制表(HT) （跳到下一个TAB位置）        009
\v       垂直制表(VT)                              011
\\       代表一个反斜线字符''\'                    092
\'       代表一个单引号（撇号）字符                039
\"       代表一个双引号字符                        034
\0       空字符(NULL)                              000
\ddd     1到3位八进制数所代表的任意字符           三位八进制
\xhh     1到2位十六进制所代表的任意字符          二位十六进制	

接口是对动作的抽象，抽象类是对根源的抽象。

ResourceBundle  语言处理,国际化

各种语言的链表实现：
Singly-linked list/Element definition
Singly-linked list/Element insertion

String转流
InputSteam in = new ByteArrayInputStream(str.getBytes());

消息队列：http://blog.csdn.net/shaobingj126/article/details/50585035

事件驱动是指在持续事务管理过程中，进行决策的一种策略，即跟随当前时间点上出现的事件，调动可用资源，执行相关任务，使不断出现的问题得以解决，防止
事务堆积。在计算机编程、公共关系、经济活动等领域均有应用。

1.ArrayList
ArrayList 初始化大小是 10 （如果你知道你的arrayList 会达到多少容量，可以在初始化的时候就指定，能节省扩容的性能开支） 
扩容点规则是，新增的时候发现容量不够用了，就去扩容 
扩容大小规则是，扩容后的大小= 原始大小+原始大小>>1。（例如：原始大小是 10 ，扩容后的大小就是 10 + 10>>1 = 15）

2.linkedList
linkedList 是一个双向链表，没有初始化大小，也没有扩容的机制，就是一直在前面或者后面新增就好。 
对于双向链表的理解

3.HashMap
HashMap 初始化大小是 16 ，扩容因子默认0.75（可以指定初始化大小，和扩容因子） 
扩容机制.(当前大小 和 当前容量 的比例超过了 扩容因子，就会扩容，扩容后大小为 一倍。例如：初始大小为 16 ，扩容因子 0.75 ，当容量为12的时候，比
例已经是0.75 。触发扩容，扩容后的大小为 32.)

Nginx编译环境：
yum install gcc-c++
yum install -y pcre pcre-devel
yum install -y zlib zlib-devel
yum install -y openssl openssl-devel

google guava immutableList：不可变集合

java.util.concurrent.ConcurrentMap接口代表一个Map,它可以处理并发访问

Java获取当前类名的两种方法
适用于非静态方法：this.getClass().getName()
适用于静态方法：Thread.currentThread().getStackTrace()[1].getClassName()

org.apache.poi  操作office

查看pid: netstat -ano

定时,Timer类

nexus:maven私服

maven:package是把jar打到本项目的target下，而install时把target下的jar安装到本地仓库，供其他项目使用.

InvocationHandler：代理

System.getenv：获取指定的环境变量值
String.valueOf：返回参数的字符串表示形式

datagramSocket:此类表示用来发送和接收数据报包的套接字。

把对象转换为字节序列的过程称为对象的序列化；把字节序列恢复为对象的过程称为对象的反序列化。
对象的序列化主要有两种用途：
1） 把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；
2） 在网络上传送对象的字节序列。

无论是何种类型的数据，都会以二进制序列的形式在网络上传送。发送方需要把这个Java对象转换为字节序列，才能在网络上传送；接收方则需要把字节序列再
恢复为Java对象。

对象序列化包括如下步骤：
1） 创建一个对象输出流，它可以包装一个其他类型的目标输出流，如文件输出流；
2） 通过对象输出流的writeObject()方法写对象。

对象反序列化的步骤如下：
1） 创建一个对象输入流，它可以包装一个其他类型的源输入流，如文件输入流；
2） 通过对象输入流的readObject()方法读取对象。

Linux Kernel

C++的强大在于提供高级抽象的同时又不放弃对程序的细节控制。规模不大不需要高级抽象，拿C写妥妥的够了，不是基础平台的话不需要性能的可预测性，拿个
带垃圾回收的会舒爽很多。

存储在文件中的数据是一种"持久存储"
内存中的数据在程序退出或计算机关机以后就会丢失
文件中的数据是以一定的顺序依次存储起来的。
在实际读取时由硬件以及操作系统完成对于数据的控制，保证程序读取到的数据和存储的顺序一致。

绝对路径的缺点:不同操作系统文件路径和表示形式不同
在实际项目中一般使用相对路径或者类路径
在程序中需要存储数据时，如果自己设计了特定的文件格式，则可以自定义文件的后缀名。

vmware没网解决方法：
[root@mina0 hadoop]# systemctl stop NetworkManager
[root@mina0 hadoop]# systemctl disable NetworkManager

centos7没网：
cd /etc/sysconfig/network-scripts/
修改配置文件
reboot=true

然后重启网卡：
[root@mina0 hadoop]# systemctl restart network
[root@mina0 hadoop]# ifconfig

修复LSP。命令行窗口—输入netsh winsock reset—重启计算机。

mac安装任何来源的安装包
sudo -spctl --master-disable

REST：Representational State Transfer 表述性状态传递

springboot：约定大于配置

Docker通常用于如下场景：
    web应用的自动化打包和发布。
    自动化测试和持续集成、发布。
    在服务型环境中部署和调整数据库或其他的后台应用。
    从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。
	
navicat查询mysql表结构：
SELECT
  COLUMN_TYPE 数据类型,
    DATA_TYPE 字段类型,
  CHARACTER_MAXIMUM_LENGTH 长度,
  IS_NULLABLE 是否为空,
  COLUMN_DEFAULT 默认值,
  COLUMN_COMMENT 备注 
FROM
 INFORMATION_SCHEMA.COLUMNS where
table_schema ='hq_origin_lis'
AND
table_name  = 'lcaccept';

对比两张excel
Sub 数据对比()
    Dim i As Integer
    Dim j As Integer
    Dim s As String
    'Dim xls As New Excel.Application
    'Dim wb As Excel.Workbook
    For i = 1 To 10        '员工基础报表数据范围
        'Set wb = Sheets(Sheets("lc").Cells(1, i))
        s = Sheets("lc").Cells(i, 1)
        'Sheets("" + s + "").Cells(46, 1) = Sheets("" + s + "").UsedRange.Rows.Count
        For j = 3 To Sheets("" + s + "").UsedRange.Rows.Count
        'For j = 3 To 43
        'For j = 3 To 11    '员工待遇统计表数据范围
          'If Sheets("员工基础报表").Cells(i, 1) = Sheets("员工待遇统计表").Cells(j, 1) Then
            'If Sheets("" + s + "").Cells(j, 1).Font.Color <> 3 Then
            If Sheets("" + s + "").Cells(j, 1) <> "" Then
            If Sheets("" + s + "").Cells(j, 1).Font.Color <> vbRed Then
               'If UCase(Sheets("" + s + "").Cells(j, 2)) <> UCase(Sheets("" + s + "").Cells(j, 9)) Then
               If UCase(Sheets("" + s + "").Cells(j, 2)) <> UCase(Sheets("" + s + "").Cells(j, 9)) Then
               Sheets("" + s + "").Cells(j, 2).Font.Color = vbYellow
               Sheets("" + s + "").Cells(j, 9).Font.Color = vbBlue
               'Sheets("员工基础报表").Cells(i, 8) = "已存在"   '存在时进行标记
               End If
            End If
            End If
        'Next j
        Next j
    Next i
End Sub

应对高并发：
1.使用缓存
2.使用生成静态页面
html纯静态页面是效率最高，消耗最小的页面
3.图片与服务器分离
4.代码构造的时候尽量避免不必要的资源浪费
<1>不要频繁的使用new对象，对于在整个应用中只需要存在一个实例的类使用单例模式。对于string的连接操作，使用stringbuffer或者stringbuilder。
对于utility类型的类通过静态方法来访问
<2>避免使用错误的方式，如exception可以控制方法推出，但是Exception要保留stacktrace消耗性能，除非必要不要使用instanceof做条件判断，尽量使用
比的条件判断方式。使用java中效率高的类，比如arraylist比vector快
<3>使用线程安全的集合对象
<4>使用线程池

JPA:
builder->query->priteria->select
@Version:乐观锁
@Lock:悲观锁或手动配置乐观锁
@Reference   内存释放
@Transactional 只能被应用到public方法上, 对于其它非public的方法,如果标记了@Transactional也不会报错,但方法没有事务功能.
JPA               Hibernate        Mybatis
EntityManager     Session          SqlSession
以Repository结尾表示dao

jvm：
|----------------------------------------------------------------------------|
|    程序计数器    |    本地方法栈    |      虚拟机栈    |      方法区       |
|----------------------------------------------------------------------------|
|                                 虚拟机堆                                   |
|----------------------------------------------------------------------------|

weChat:
框架以栈的形式维护页面

模块化的jdk:
编译时                       链接时                   运行时
                                                      ALL-DEFAULT
                                                      ALL-SYSTEM
ALL-MODULE-PATH                                       ALL-MODULE-PATH

Java泛型字段含义:
K ： Key（健，常在集合中使用）
V ： Value（值，常在集合中使用）
E ： Element（元素，常在集合中使用）
T ： Type（类型，常代表 java 类）
? ： 表示不确定的 java 类型（无限制通配符类型）
N ： Number（数值类型）
S、U、V ： 2nd、3rd、4th types
Object ： java 中所有类的父类

视频流:
https://www.cnblogs.com/balabalala/p/8044057.html
RTSP发起/终结流媒体、RTP传输流媒体数据 、RTCP对RTP进行控制，同步。
RTP：实时传输协议（Real-time Transport Protocol）

RTSP：实时流协议（Real Time Streaming Protocol，RTSP）

ssh通道:
ssh -N -f -L 2121:234.234.234.234:21 123.123.123.123
ftp localhost:2121 # 现在访问本地2121端口，就能连接234.234.234.234的21端口了
-N 告诉SSH客户端，这个连接不需要执行任何命令。仅仅做端口转发
-f 告诉SSH客户端在后台运行
-L X:Y:Z的含义是，将IP为Y的机器的Z端口通过中间服务器映射到本地机器的X端口。
最后一个参数是我们用来建立隧道的中间机器的IP地址(IP: 123.123.123.123)

ssh -Nf -R 2222:127.0.0.1:22 123.123.123.123
ssh -p 2222 localhost
-R X:Y:Z 就是把我们内部的Y机器的Z端口映射到远程机器的X端口上。

ssh -N -f -D 1080 123.123.123 # 将端口绑定在127.0.0.1上
ssh -N -f -D 0.0.0.0:1080 123.123.123.123 # 将端口绑定在0.0.0.0上

execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern)throws-pattern?)
括号中各个pattern分别表示：
修饰符匹配（modifier-pattern?）
返回值匹配（ret-type-pattern）可以为*表示任何返回值,全路径的类名等
类路径匹配（declaring-type-pattern?）
方法名匹配（name-pattern）可以指定方法名 或者 *代表所有, set* 代表以set开头的所有方法
参数匹配（(param-pattern)）可以指定具体的参数类型，多个参数间用","隔开，各个参数也可以用"*"来表示匹配任意类型的参数，如(String)表示匹配一个String参数的方法；(*,String)
表示匹配有两个参数的方法，第一个参数可以是任意类型，而第二个参数是String类型；可以用(..)表示零个或多个任意参数
异常类型匹配（throws-pattern?）
其中后面跟着"?"的是可选项

Mysql:
bigint
从 -2^63 (-9223372036854775808) 到 2^63-1 (9223372036854775807) 的整型数据（所有数字）。存储大小为 8 个字节。
int
从 -2^31 (-2,147,483,648) 到 2^31 - 1 (2,147,483,647) 的整型数据（所有数字）。存储大小为 4 个字节。int 的 SQL-92 同义字为 integer。
smallint
从 -2^15 (-32,768) 到 2^15 - 1 (32,767) 的整型数据。存储大小为 2 个字节。
tinyint
从 0 到 255 的整型数据。存储大小为 1 字节。

Exception
sun.misc.Launcher$AppClassLoader@18b4aac2
把对应的jar名称加入到META-INF/spring-devtools.properties文件
restart.include.thirdparty=/thirdparty-1.1.1.jar

RMI、Hessian、Burlap、Httpinvoker、WebService5这种通讯协议的在不同的数据结构和不同数据量时的传输性能。
RMI是java语言本身提供的远程通讯协议，稳定高效，是EJB的基础。但它只能用于JAVA程序之间的通讯。
Hessian和Burlap是caucho公司提供的开源协议，基于HTTP传输，服务端不用开防火墙端口。协议的规范公开，可以用于任意语言。
Httpinvoker是SpringFramework提供的远程通讯协议，只能用于JAVA程序间的通讯，且服务端和客户端必须使用SpringFramework。
Web service是连接异构系统或异构语言的首选协议，它使用SOAP形式通讯，可以用于任何语言，目前的许多开发工具对其的支持也很好。

写法位（8）10=（00001000）2；       十进制的8     2进制的00001000

位异或运算（^）
运算规则是：两个数转为二进制，然后从高位开始比较，如果相同则为0，不相同则为1。

位与运算符（&）
运算规则：两个数都转为二进制，然后从高位开始比较，如果两个数都为1则为1，否则为0。

位或运算符（|）
运算规则：两个数都转为二进制，然后从高位开始比较，两个数只要有一个为1则为1，否则就为0。

位非运算符（~）
运算规则：如果位为0，结果是1，如果位为1，结果是0.

在Java中，所有数据的表示方法都是以补码的形式表示，如果没有特殊说明，Java中的数据类型默认是int,int数据类型的长度是8位，一位是四个字节，就是32字节，32bit.
37转为二进制是00100101
补码后为： 00000000 00000000 00000000 00100101
取反为： 11111111 11111111 11111111 11011010
因为高位是1，所以原码为负数，负数的补码是其绝对值的原码取反，末尾再加1。
因此，我们可将这个二进制数的补码进行还原：
首先，末尾减1得反码：
11111111 11111111 11111111 11011001
其次，将各位取反得原码：
10000000 00000000 00000000 00100110，此时二进制转原码为38
所以~37 = -38.

http://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html
机器数:
一个数在计算机中的二进制表示形式,机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.
真值:
将带符号位的机器数对应的真正数值称为机器数的真值。
0000 0001的真值 = +000 0001 = +1，1000 0001的真值 = –000 0001 = –1

原码:
原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值.
[1111 1111 , 0111 1111]                 [-127 , 127]

反码：
正数的反码是其本身。
负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.
[+1] = [00000001]原 = [00000001]反
[-1] = [10000001]原 = [11111110]反
一个数的反码, 实际上是这个数对于一个膜的同余数. 而这个膜并不是我们的二进制, 而是所能表示的最大值.
在反码的基础上+1, 只是相当于增加了膜的值.

补码：
正数的补码就是其本身
负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)
[+1] = [00000001]原 = [00000001]反 = [00000001]补
[-1] = [10000001]原 = [11111110]反 = [11111111]补

机器可以只有加法而没有减法
使用原码或反码表示的范围为[-127, +127], 而使用补码表示的范围为[-128, 127]
因为机器使用补码, 所以对于编程中常用到的32位int类型, 可以表示范围是: [-2^31, 2^31-1]

mysql、oracle
SELECT 1 FROM DUAL

Spring Cloud Config 加密和解密
要使用加密和解密功能，需要在JVM中安装全面的JCE（默认情况下不存在，官网下载），并按照安装说明（实际上将JRE lib / security目录中的2个策略文件替换为下载的文件）。

Spring容器成功启动的三大要件分别是：Bean定义信息、Bean实现类以及Spring本身
spring javaBean:
bean的衍生
@Bean
@Component
@Repository：用于对DAO实现类进行标注；
@Service：用于对Service实现类进行标注；
@Controller：用于对Controller实现类进行标注；
@Configuration： 将一个POJO标注为定义Bean的配置类
属性注入：
属性注入即通过setXxx()方法注入Bean的属性值或依赖对象，由于属性注入方式具有可选择性和灵活性高的优点，因此属性注入是实际应用中最常采用的注入方式。
属性注入要求Bean提供一个默认的构造函数，并为需要注入的属性提供对应的Setter方法。Spring先调用Bean的默认构造函数实例化Bean对象，然后通过反射的方式
调用Setter方法注入属性值。
@Qualifier 指定注入Bean的名称
@Autowired默认按类型匹配注入Bean，@Resource则按名称匹配注入Bean。而@Inject和@Autowired一样也是按类型匹配注入的Bean的，只不过它没有required属性

@Value的值有两类：
① ${ property : default_value }
② #{ obj.property? : default_value }

nginx配置主要组成部分
1.main：用于进行nginx全局信息的配置
2.events：用于nginx工作模式的配置
3.http：用于进行http协议信息的一些配置
4.server：用于进行服务器访问信息的配置
5.location：用于进行访问路由的配置
6.upstream：用于进行负载均衡的配置

ps aux|head -1;
ps aux|grep -v PID|sort -rn -k +3|head

@resource可以理解为资源->数据源->也就是数据连接，基本上就是告诉程序 数据库在哪里

@persistencecontext则是注入一坨保存实体类状态的 数据结构，针对实体类的不同状态(四种,managedh或detached等)可以做出不同的
反应(merge,persist等等)，其实就是把数据从数据库里提出，然后在内存里处理的，再返回 数据库的法则。 

JVM参数配置途径：
1.Tomcat/bin/catalina.bat
2.IDE中配置

G1的目标是为应用提供停顿时间和吞吐量的最佳平衡
-XX:+UseG1GC
初始标记、并发标记、重新标记、清除、转移回收。
并行收集、串行担保
G1不存在物理上的年轻代和老年代的区别。

大对象是直接分配在old区。blob等。

JPA
Builder -> Query -> Criteria ->select
Predicate  定义希望用于FilteredRowSet对象的过滤器
动态查询   重写toPredicate
@Version 乐观锁
@Lock 悲观锁或手动配置乐观锁

joda：Date类处理工具

weChatDev：
start -> onLaunch callback
json -> page -wxml ->wxss ->js
page： 
页面构造器
        / \
	 data  index.wxml
	           ↓
			  onload -> deal
框架以栈的形式维护页面	

ZGC（垃圾收集）主要新增了两项技术，一个是着色指针Colored Pointer，另一个是读屏障Load Barrier。		  

开源社区
http://sourceforge.net/
http://www.apache.org/

maven 
<exclusion>  排除依赖

面向过程：在面向过程程序设计时，数据和操作往往是分离的
自顶向下、逐步求精

面向对象：面向对象是将数据和操作数据的函数紧密结合
程序是对现实世界的抽象和描述，现实世界的基本单元是物体，与之对应的，程序中的基本单元是对象。
对象都由两部分组成 - 描述对象状态或属性的数据（变量）以及描述对象行为或者功能的方法（函数）。

抽象类不能被实例化

接口过时时添加@Deprecated

ArrayList的subList结果不可强转成ArrayList，subList返回的是ArrayList的内部类SubList，并不是 ArrayList，而是ArrayList的一个视图，
对于SubList子列表的所有操作最终会反映到原列表上。

集合初始化时指定大小 （需要存储的元素个数/负载因子）+1

获取单例对象需要保证线程安全，其中的方法也需要保证线程安全

git更新远程分支
git remote update origin --prune

避免在锁代码块中调用RPC方法

对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。

hashMap在resize的时候由于高并发可能出现死链，加锁规避此风险

spring手动回滚事务：
TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();

System.getProperty()参数大全 
# java.version                                Java Runtime Environment version  
# java.vendor                                Java Runtime Environment vendor  
# java.vendor.url                           Java vendor URL  
# java.home                                Java installation directory  
# java.vm.specification.version   Java Virtual Machine specification version  
# java.vm.specification.vendor    Java Virtual Machine specification vendor  
# java.vm.specification.name      Java Virtual Machine specification name  
# java.vm.version                        Java Virtual Machine implementation version  
# java.vm.vendor                        Java Virtual Machine implementation vendor  
# java.vm.name                        Java Virtual Machine implementation name  
# java.specification.version        Java Runtime Environment specification version  
# java.specification.vendor         Java Runtime Environment specification vendor  
# java.specification.name           Java Runtime Environment specification name  
# java.class.version                    Java class format version number  
# java.class.path                      Java class path  
# java.library.path                 List of paths to search when loading libraries  
# java.io.tmpdir                       Default temp file path  
# java.compiler                       Name of JIT compiler to use  
# java.ext.dirs                       Path of extension directory or directories  
# os.name                              Operating system name  
# os.arch                                  Operating system architecture  
# os.version                       Operating system version  
# file.separator                         File separator ("/" on UNIX)  
# path.separator                  Path separator (":" on UNIX)  
# line.separator                       Line separator ("/n" on UNIX)  
# user.name                        User’s account name  
# user.home                              User’s home directory  
# user.dir                               User’s current working directory

MySQL：
可以使用唯一索引支持业务唯一性
当某一列的值全是NULL时，count(col)的返回结果为0，但sum(col)的返回结果为NULL
使用ISNULL()来判断是否为NULL值。NULL与任何值的直接比较都为NULL。
外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。
如果需要存储表情，那么选择utfmb4来进行存储。utfmb4是utf8的超集，完全兼容utf8，utfmb4采用四字节存储，utf8采用3字节。

分层领域模型规约：
    DO（Data Object）；
	DTO（Data Transfer Object）；
	BO（Business Object）；
	AO（Application Object）；
	VO（View Object）；
	
maven:	
mvn dependency:resolve  前后信息比对	
mvn dependency:tree     找出差异点	
	
WAR文件代表了一个Web应用程序，JAR是类的归档文件	

在Maven中dependencyManagement的作用其实相当于一个对所依赖jar包进行版本管理的管理器。

-XX:+HeapDumpOnOutOfMemoryError参数，让JVM碰到OOM场景时输出dump信息

/etc/sysctl.conf
net.ipv4.tcp_fin_timeout = 30    调小tcp协议的time_out超时时间

ulimit -a : 查看linux相关的参数
ulimit -n 2048 ： 修改当前进程linux最大文件句柄数

/etc/security/linits.conf   
*　　soft　　nofile　　65536
*　　hard　　nofile　　65536
修改当前用户最大句柄数（fd:  file descriptor）

线上环境jvm的Xms和Xmx设置一样大小的内存容量，避免在GC后调整堆大小带来的压力

服务器内部重定向使用forward；外部重定向使用url拼装

查看linux硬件
cpu：lscpu
内存：free -m
查看系统支持的io调度算法：dmesg | grep -i scheduler

mysql引擎：
    ISAM:不支持事务   需经常备份     查询性能高
	MYISAM:表级别锁定    快速读取    有索引和字段管理    损坏后不能恢复
	HEAP：驻留内存
	INNODB: 支持事务和外键    不保存行数  select(*)效率差   select(*)包含where时效率与MYISAM一样  支持行级锁

jvm：young区到old区转换时   GC root(可达性分析)
     instance几次判断之后  -> old

OOP(Object oriented programing):
    原则之一：计算机程序是有单个能够起到子程序作用的单元或对象组合而成。
    重用、灵活、扩展
    封装、继承、多态

redis String 最大长度：512M